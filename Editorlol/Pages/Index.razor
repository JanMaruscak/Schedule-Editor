@page "/"
@using BlazeCardsCore.Components
@using BlazeCardsCore.State
@using BlazeCardsCore.Descriptors

<button @onclick="GoLeft" style="outline:none; border: none; padding:5px">Left</button>
<button @onclick="GoRight" style="outline:none; border: none; padding:5px">right</button>
<button @onclick="AddCard" style="outline:none; border: none; padding:5px">Add Card</button>
<button @onclick="AddBreak" style="outline:none; border: none; padding:5px">Add Break</button>
<button @onclick="DeleteCard" style="outline:none; border: none; padding:5px">Delete card</button>
<select @onchange="SelectClass">
    <option value="T2">T2</option>
    <option value="T1">T1</option>
</select>
@(Week+1)/
@(Weeks.Count)

<div style="display: flex;">
    @foreach (var item in Days)
    {
        <div style="display: flex; flex-direction: column">
            <p style="width: 200px; text-align:center; color: black">@item.DayOfWeek</p>
            <p style="width: 200px; text-align:center; color: black">@item.Day.ToString(). @item.Month.ToString().</p>
        </div>
    }
</div>

<div style="width: 100vw; height: 100vh">
    <CanvasComponent State="@cardState"></CanvasComponent>
</div>

@code {
    private CardState cardState;
    List<DateTime> Days = new List<DateTime>
    ();

    int Week = 0;
    int GoneLeft = 0;
    int GoneRight = 0;

    int MarginTop = 0;
    int Height = 1000;
    int Width = 200;

    string CurClass = "T2";
    Dictionary<string, List<List<VerticalListCard>>> Classes = new Dictionary<string, List<List<VerticalListCard>>>();
    Dictionary<string, ClassInfo> ClassInfos = new Dictionary<string, ClassInfo>();

    List<List<VerticalListCard>> Weeks = new List<List<VerticalListCard>>();

    private void DeleteCard()
    {
        //if (this.cardState.Selected is SchoolCard)
        {
            foreach (var item in this.cardState.Selected)
            {
                item.UnhookFromParent();
            }
        }
    }

    void SelectClass(ChangeEventArgs e)
    {
        foreach (var item in Weeks[Week])
        {
            this.cardState.Storage.Cards.Remove(item);
        }

        foreach (var item in Classes[e.Value.ToString()][ClassInfos[e.Value.ToString()].Week])
        {
            this.cardState.Storage.Cards.Add(item);
        }
        Classes[CurClass] = Weeks.ToList();
        Weeks = Classes[e.Value.ToString()].ToList();

        ClassInfos[CurClass].Week = Week;
        ClassInfos[CurClass].GoneLeft = GoneLeft;
        ClassInfos[CurClass].GoneRight = GoneRight;
        ClassInfos[CurClass].Days = Days.ToList();

        Week = ClassInfos[e.Value.ToString()].Week;
        GoneLeft = ClassInfos[e.Value.ToString()].GoneLeft;
        GoneRight = ClassInfos[e.Value.ToString()].GoneRight;
        Days = ClassInfos[e.Value.ToString()].Days.ToList();

        CurClass = e.Value.ToString();

        this.cardState.Canvas.InvokeChange();
    }
    private void AddCard()
    {
        Weeks[Week][0].AddChild(new SchoolCard("VYT", "302", "PN", "14:30-15:45"));
    }
    private void AddBreak()
    {
        Weeks[Week][0].AddChild(new BreakCard());
    }
    private void GoRight()
    {
        if (Week + 1 == Weeks.Count)
        {
            var newWeek = new List<VerticalListCard>
                ();
            for (int i = 0; i < 5; i++)
            {
                newWeek.Add(GetTemplateList(i, Width, MarginTop));
            }
            Weeks.Add(newWeek);

            foreach (var item in Weeks[Week])
            {
                this.cardState.Storage.Cards.Remove(item);
            }

            foreach (var item in newWeek)
            {
                this.cardState.Storage.Cards.Add(item);
            }
            GoneRight++;
        }
        else
        {
            foreach (var item in Weeks[Week])
            {
                this.cardState.Storage.Cards.Remove(item);
            }

            foreach (var item in Weeks[Week + 1])
            {
                this.cardState.Storage.Cards.Add(item);
            }
        }
        for (int i = 0; i < Days.Count; i++)
        {
            Days[i] = Days[i].AddDays(7);
        }
        Week++;
        this.cardState.Canvas.InvokeChange();
    }
    private void GoLeft()
    {
        if (Week == 0)
        {
            var newWeek = new List<VerticalListCard>
                ();
            for (int i = 0; i < 5; i++)
            {
                newWeek.Add(GetTemplateList(i, Width, MarginTop));
            }

            foreach (var item in Weeks[Week])
            {
                this.cardState.Storage.Cards.Remove(item);
            }

            foreach (var item in newWeek)
            {
                this.cardState.Storage.Cards.Add(item);
            }
            Weeks.Insert(0, newWeek);
            GoneLeft--;
        }
        else
        {
            foreach (var item in Weeks[Week])
            {
                this.cardState.Storage.Cards.Remove(item);
            }

            foreach (var item in Weeks[Week - 1])
            {
                this.cardState.Storage.Cards.Add(item);
            }
            Week--;
        }
        for (int i = 0; i < Days.Count; i++)
        {
            Days[i] = Days[i].AddDays(-7);
        }
        this.cardState.Canvas.InvokeChange();
    }

    protected override void OnInitialized()
    {
        for (int x = 0; x < 5; x++)
        {
            Days.Add(DateTime.Now.AddDays(x));
        }
        Classes.Add("T2", Weeks);
        Classes.Add("T1", new List<List<VerticalListCard>>());

        ClassInfos.Add("T2", new ClassInfo(0, 0, 0, Days));
        ClassInfos.Add("T1", new ClassInfo(0, 0, 0, Days));

        Console.WriteLine("oenis");
        Classes["T1"].Add(new List<VerticalListCard>());
        for (int i = 0; i < 5; i++)
        {
            Classes["T1"][0].Add(GetTemplateList(i, Width, MarginTop));
        }
        this.cardState = new CardState();
        Weeks.Add(new List<VerticalListCard>());

        for (int i = 0; i < 5; i++)
        {
            var area = new DropAreaCard();
            area.PositionBehavior.Position = new BlazeCardsCore.Models.Vector2f(i * Width, MarginTop);
            area.SizeBehavior.Size = new BlazeCardsCore.Models.Vector2f(Width, Height);
            area.Clickable = false;
            area.Draggable = false;
            area.Classes.Add("school-background");
            area.Classes.Add(i.ToString());
            area.OnDrop += (o, e) =>
            {
                var index = int.Parse(area.Classes.Last());
                foreach (var item in e.Cards)
                {
                    if (Weeks[Week][index] != item.Parent)
                    {
                        item.UnhookFromParent();
                        Weeks[Week][index].AddChild(item);
                    }
                }

                foreach (var item in Weeks[Week][index].Children)
                {
                    if (item is SchoolCard)
                    {
                        var sch = item as SchoolCard;
                        sch.Time.TextBehavior.Value = item.PositionBehavior.Position.Y.ToString();
                    }
                }
                foreach (var item in e.Cards[0].Parent.Children)
                {
                    if (item is SchoolCard)
                    {
                        var sch = item as SchoolCard;
                        sch.Time.TextBehavior.Value = item.PositionBehavior.Position.Y.ToString();
                    }
                }
            };
            this.cardState.Storage.Cards.Add(area);
        }
        for (int i = 0; i < 5; i++)
        {
            var schoolCard = new SchoolCard("VYT", "302", "PN", "14:30-15:45");

            var list = new VerticalListCard();
            list.Clickable = false;
            list.Draggable = false;

            list.PositionBehavior.Position = new BlazeCardsCore.Models.Vector2f(i * Width, MarginTop);

            list.AddChild(schoolCard);

            Weeks[0].Add(list);
            this.cardState.Storage.Cards.Add(list);
        }
    }
    private VerticalListCard GetTemplateList(int index, int width, int marginTop)
    {
        VerticalListCard newList = new VerticalListCard();
        newList.Clickable = true;
        newList.Draggable = true;
        newList.PositionBehavior.Position = new BlazeCardsCore.Models.Vector2f(index * width, marginTop);
        return newList;
    }
}